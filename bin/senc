#!/bin/zsh

# encrypt_file.zsh
encrypt_file() {
    if [[ $# -ne 1 ]]; then
        echo "Usage: encrypt_file <input_file>"
        return 1
    fi
    
    local input_file="$1"
    local output_file="${input_file}.senc"
    local temp_enc=""
    local success=false
    
    # Check if input file exists
    if [[ ! -f "$input_file" ]]; then
        echo "Error: Input file '$input_file' does not exist."
        return 1
    fi
    
    # Check if output file already exists
    if [[ -f "$output_file" ]]; then
        echo "Error: Output file '$output_file' already exists."
        return 1
    fi

    # Get the password and verify it BEFORE creating any files
    echo -n "Enter encryption password: "
    read -s ENCRYPT_PASSWORD
    echo
    echo -n "Verify encryption password: "
    read -s VERIFY_PASSWORD
    echo

    if [[ "$ENCRYPT_PASSWORD" != "$VERIFY_PASSWORD" ]]; then
        echo "Error: Passwords do not match. Original file preserved."
        return 1
    fi

    # Only create temporary files and start encryption if passwords match
    temp_enc="$(mktemp)"
    
    # Create self-extracting script
    cat > "$output_file" << 'EOF'
#!/bin/zsh
#
# Secure self-decrypting archive
# This script is designed to safely decrypt its own contents
# 
# Usage: ./filename.senc
#

# Verify we're running on macOS or Linux
if [[ "$(uname)" != "Darwin" && "$(uname)" != "Linux" ]]; then
    echo "This script requires macOS or Linux"
    exit 1
fi

# Verify openssl is available
if ! command -v openssl > /dev/null; then
    echo "Error: openssl command not found"
    exit 1
fi

# Find the line number where the encrypted data begins
SCRIPT_END=$(awk '/^__ENCRYPTED_DATA_BELOW__/ { print NR; exit 0; }' "$0")

if [[ -z "$SCRIPT_END" ]]; then
    echo "Error: Invalid archive format"
    exit 1
fi

# Create a secure temporary directory
if command -v mktemp > /dev/null; then
    TEMP_DIR=$(mktemp -d)
else
    echo "Error: mktemp command not found"
    exit 1
fi

cleanup() {
    rm -rf "$TEMP_DIR"
}
trap cleanup EXIT

# Extract the encrypted data
tail -n +$((SCRIPT_END + 1)) "$0" > "$TEMP_DIR/data.enc"

# Decrypt all content at once to a temporary file
DECRYPTED_FILE="$TEMP_DIR/decrypted_data"
if ! openssl enc -d -aes-256-cbc -pbkdf2 -in "$TEMP_DIR/data.enc" -out "$DECRYPTED_FILE"; then
    echo "Error: Decryption failed - incorrect password?"
    exit 1
fi

# Get the original filename from the first line and combine with current directory
ORIGINAL_NAME=$(head -n 1 "$DECRYPTED_FILE")
OUTPUT_PATH="$(dirname "$0")/$ORIGINAL_NAME"
echo "Decrypting to: $OUTPUT_PATH"

# Extract the actual content (everything after the first line)
tail -n +2 "$DECRYPTED_FILE" > "$OUTPUT_PATH"

if [[ $? -eq 0 && -s "$OUTPUT_PATH" ]]; then
    echo "File successfully decrypted"
    exit 0
else
    echo "Error: Decryption failed"
    [[ -f "$OUTPUT_PATH" ]] && rm "$OUTPUT_PATH"
    exit 1
fi

__ENCRYPTED_DATA_BELOW__
EOF
    
    # Create temporary file with filename and content
    echo "$input_file" > "$temp_enc"
    cat "$input_file" >> "$temp_enc"
    
    # Use the password for encryption
    if echo "$ENCRYPT_PASSWORD" | openssl enc -aes-256-cbc -salt -pbkdf2 -in "$temp_enc" -pass stdin >> "$output_file"; then
        if [[ -s "$output_file" && $(tail -n +1 "$output_file" | wc -c) -gt 500 ]]; then
            chmod 755 "$output_file"
            success=true
        else
            echo "Error: Encrypted output appears invalid"
            [[ -f "$output_file" ]] && rm "$output_file"
        fi
    else
        echo "Error: Encryption failed"
        [[ -f "$output_file" ]] && rm "$output_file"
    fi
    
    # Clean up temporary files
    [[ -f "$temp_enc" ]] && rm "$temp_enc"
    
    if $success; then
        echo "Self-decrypting archive created as '$output_file'"
        rm "$input_file"
        return 0
    else
        echo "Error: Creation of self-decrypting archive failed. Original file preserved."
        [[ -f "$output_file" ]] && rm "$output_file"
        return 1
    fi
}

# Call the function if script is executed
if [[ $# -eq 1 ]]; then
    encrypt_file "$1"
else
    echo "Usage: $0 <input_file>"
    exit 1
fi
